// Generated by CoffeeScript 1.7.1
(function() {
  (function(root, factory) {
    if (typeof define === "function" && define.amd) {
      define([], factory);
    } else if (typeof exports === "object") {
      module.exports = factory();
    } else {
      root.HH = factory();
    }
  })(this, function() {
    "use strict";
    var DEFAULT_WORDLIST, HumanHasher, NUMBER_WORDLIST, _i, _results;
    DEFAULT_WORDLIST = ["ack", "alabama", "alanine", "alaska", "alpha", "angel", "apart", "april", "arizona", "arkansas", "artist", "asparagus", "aspen", "august", "autumn", "avocado", "bacon", "bakerloo", "batman", "beer", "berlin", "beryllium", "black", "blossom", "blue", "bluebird", "bravo", "bulldog", "burger", "butter", "california", "carbon", "cardinal", "carolina", "carpet", "cat", "ceiling", "charlie", "chicken", "coffee", "cola", "cold", "colorado", "comet", "connecticut", "crazy", "cup", "dakota", "december", "delaware", "delta", "diet", "don", "double", "early", "earth", "east", "echo", "edward", "eight", "eighteen", "eleven", "emma", "enemy", "equal", "failed", "fanta", "fifteen", "fillet", "finch", "fish", "five", "fix", "floor", "florida", "football", "four", "fourteen", "foxtrot", "freddie", "friend", "fruit", "gee", "georgia", "glucose", "golf", "green", "grey", "hamper", "happy", "harry", "hawaii", "helium", "high", "hot", "hotel", "hydrogen", "idaho", "illinois", "india", "indigo", "ink", "iowa", "island", "item", "jersey", "jig", "johnny", "juliet", "july", "jupiter", "kansas", "kentucky", "kilo", "king", "kitten", "lactose", "lake", "lamp", "lemon", "leopard", "lima", "lion", "lithium", "london", "louisiana", "low", "magazine", "magnesium", "maine", "mango", "march", "mars", "maryland", "massachusetts", "may", "mexico", "michigan", "mike", "minnesota", "mirror", "mississippi", "missouri", "mobile", "mockingbird", "monkey", "montana", "moon", "mountain", "muppet", "music", "nebraska", "neptune", "network", "nevada", "nine", "nineteen", "nitrogen", "north", "november", "nuts", "october", "ohio", "oklahoma", "one", "orange", "oranges", "oregon", "oscar", "oven", "oxygen", "papa", "paris", "pasta", "pennsylvania", "pip", "pizza", "pluto", "potato", "princess", "purple", "quebec", "queen", "quiet", "red", "river", "robert", "robin", "romeo", "rugby", "sad", "salami", "saturn", "september", "seven", "seventeen", "shade", "sierra", "single", "sink", "six", "sixteen", "skylark", "snake", "social", "sodium", "solar", "south", "spaghetti", "speaker", "spring", "stairway", "steak", "stream", "summer", "sweet", "table", "tango", "ten", "tennessee", "tennis", "texas", "thirteen", "three", "timing", "triple", "twelve", "twenty", "two", "uncle", "undress", "uniform", "uranus", "utah", "vegan", "venus", "vermont", "victor", "video", "violet", "virginia", "washington", "west", "whiskey", "white", "william", "winner", "winter", "wisconsin", "wolfram", "wyoming", "xray", "yankee", "yellow", "zebra", "zulu"];
    NUMBER_WORDLIST = (function() {
      _results = [];
      for (_i = 0; _i <= 255; _i++){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(n) {
      return ("000" + n.toString()).slice(-3);
    });
    HumanHasher = (function() {
      var bytes, compress, xor;

      function HumanHasher(wordlist) {
        this.wordlist = wordlist != null ? wordlist : DEFAULT_WORDLIST;
        if (this.wordlist.length !== 256) {
          throw "Wordlist must have exactly 256 items";
        }
      }

      bytes = function(digest) {
        var el, i, zips, _j, _k, _len, _len1, _results1;
        zips = [];
        for (i = _j = 0, _len = digest.length; _j < _len; i = ++_j) {
          el = digest[i];
          if (i !== digest.length - 1 && i % 2 === 0) {
            zips.push([digest[i], digest[i + 1]]);
          }
        }
        _results1 = [];
        for (_k = 0, _len1 = zips.length; _k < _len1; _k++) {
          el = zips[_k];
          _results1.push(parseInt(el.join(""), 16));
        }
        return _results1;
      };

      xor = function(iterable) {
        var el, start, _j, _len;
        start = 0;
        for (_j = 0, _len = iterable.length; _j < _len; _j++) {
          el = iterable[_j];
          start ^= el;
        }
        return start;
      };

      compress = function(bytes, target) {
        var el, i, last, seg_size, segments;
        seg_size = parseInt(bytes.length / target);
        segments = (function() {
          var _j, _results1;
          _results1 = [];
          for (i = _j = 0; 0 <= target ? _j < target : _j > target; i = 0 <= target ? ++_j : --_j) {
            _results1.push(bytes.slice(i * seg_size, (i + 1) * seg_size));
          }
          return _results1;
        })();
        last = segments[target - 1];
        last.push.apply(last, bytes.slice(target * seg_size));
        return segments = (function() {
          var _j, _len, _results1;
          _results1 = [];
          for (_j = 0, _len = segments.length; _j < _len; _j++) {
            el = segments[_j];
            _results1.push(xor(el));
          }
          return _results1;
        })();
      };

      HumanHasher.prototype.humanize = function(push_id, words, separator) {
        var compressed, el, in_bytes;
        if (words == null) {
          words = 4;
        }
        if (separator == null) {
          separator = "-";
        }
        if (words < 1 || words > 19) {
          throw "Words must be between 1 and 19";
        }
        in_bytes = bytes((push_id.slice(1).split("").map(function(c) {
          return c.charCodeAt(0).toString(16);
        })).join(""));
        compressed = compress(in_bytes, words);
        return ((function() {
          var _j, _len, _results1;
          _results1 = [];
          for (_j = 0, _len = compressed.length; _j < _len; _j++) {
            el = compressed[_j];
            _results1.push(this.wordlist[el]);
          }
          return _results1;
        }).call(this)).join(separator);
      };

      return HumanHasher;

    })();
    return {
      DEFAULT_WORDLIST: DEFAULT_WORDLIST,
      NUMBER_WORDLIST: NUMBER_WORDLIST,
      HumanHasher: HumanHasher
    };
  });

}).call(this);
